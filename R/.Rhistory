model2 <- mxModel(h1Model, data=mxData(data,type="raw"))
}
run1 <- mxRun(model1,silent=T)
run2 <- mxRun(model2,silent=T)
#print(mxCompare(run1,run2))
#vals[i] <-  mxCompare(run1,run2)$diffLL[2]
#p[i] <- mxCompare(run1,run2)$p[2]
#if (i%%10==0) {cat("Finished",i," runs\n")}
llr = run1$objective@result-run2$objective@result
df = length(omxGetParameters(run2))-length(omxGetParameters(run1))
p = 1-pchisq(llr,df)
return(list(p=p,diffLL=llr));
})
return(list(p=NA,diffLL=NA));
# return(list())
#flush.console()
#  if (keep.models) {
# 	  return(list(result=mxCompare(run2,run1),models=run2))
# } else {
#  	return(mxCompare(run2,run1))
#}
}
#
# helper function for testing specific hypothesis about
#
# specify a population model and a zero constraint restriction
simPowerZeroRestriction<-function(trueModel, restrictions, N, repetitions, keepModels=F,
snowfallCpus=-1)
{
true.model <- trueModel
keep.models <- keepModels
snowfall.cpus <- snowfallCpus
h1Model <- true.model
h0Model <- true.model
h0params <- omxGetParameters(model=h0Model)
filt <- which(  names(h0params) %in% restrictions)
if (any(h0params[filt]==0)) {
message("Warning. Specified parameters are already zero in the trueModel.")
#return()
}
h0Model <- omxSetParameters(model=h0Model,labels=restrictions,free=F,values=0)
if (snowfall.cpus > 0) {
cat("SF INIT!")
sfInit(parallel=T, cpus=snowfall.cpus)
#sfExportAll()
#sfSource("power.simulationV2.R")
sfClusterEval(require("OpenMx"))
sfClusterEval(require("sempower"))
each.rep <- ceiling(repetitions / snowfall.cpus)
# cat("EACH REP", each.rep)
x <- rep(list(each.rep), snowfall.cpus)
print(x)
results <- sfLapply( x=x, fun=sfWrapSimPower,
h0Model, h1Model, true.model,
N, keep.models)
sfRemoveAll()
sfStop()
#
# merge
#
result <- c()
result$statistics <- c()
result$p <- c()
result$N <- c()
for (i in 1:length(results)) {
result$p <- c(result$p,      results[[i]]$p)
result$N <- c(result$N,      results[[i]]$N)
result$statistics <- c(result$statistics,      results[[i]]$statistics)
}
result$simulation.type <- results[[1]]$simulation.type
class(result) <- "simPower"
#sapply( results, function(x) { return(t(x$statistics));})
return(result)
return(
result
)
} else {
return(simPower(h0Model, h1Model, true.model, N=N,
repetitions=repetitions,keepModels=keep.models))
}
}
simPowerZeroRestriction
setwd("~/Documents/Projects/sempower/R")
library("sempoert")
library("sempower")
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=100)
powerFromError(my.model)
powerFromError2df(my.model)
# empirical power plot
xseq <- seq(1,210,10)
jseq <- seq(10,100, 5)
result <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
eff <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
for (j in 1:length(jseq)) {
for (i in 1:length(xseq)) {
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=jseq[j], timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=xseq[i])
eff[i,j] <-  effective.error(my.model)
result[i,j] <- powerFromError(my.model)
}
}
ltys <- rep(c(1,3,3,3,3),10)
plot(xseq,result[,1], type="n",
lwd=3, bty="n", xlab="Sample Size", ylab="Power",ylim=c(0,1),
main="Power by sample size and residual variance")
for (j in 1:length(jseq)) {
lines(xseq, result[,j],lty=ltys[j])
xt <- 4
if (j%%5==1) text( xseq[xt], result[xt,j]-.05,labels = round(jseq[j],2))
}
effective.error(my.model)
ecr(my.model)
grr(my.model)
sample.size <- 100
temp <- 1/(1-ecr(my.model))
myecr <- ecr(my.model)
eff <- effective.error(my.model)
ss <- my.model$slope.variance
non.centrality2 <- sample.size*(log(eff/(eff+ss))+ (ss+eff)/eff-1   )
non.centrality <- sample.size*(temp-log(temp)-1 )
non.centrality3 <- sample.size/2*(temp-1)^2
non.centrality4 <- sample.size* (myecr^2/2)+ (2/3*myecr^3)
alpha <- qchisq(0.95,df=1)
1-pchisq(alpha,ncp=non.centrality,df=1)
powerFromError(my.model, alpha=.05)
# 1df test, MC result from LIFESPAN power = approx. 35%
omxmodel <- getOpenMxRepresentation(my.model)
est.power <- simPowerZeroRestriction(omxmodel,restrictions = "slopevariance",N=100)
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=100)
powerFromError(my.model)
powerFromError2df(my.model)
# empirical power plot
xseq <- seq(1,210,10)
jseq <- seq(10,100, 5)
result <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
eff <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
for (j in 1:length(jseq)) {
for (i in 1:length(xseq)) {
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=jseq[j], timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=xseq[i])
eff[i,j] <-  effective.error(my.model)
result[i,j] <- powerFromError(my.model)
}
}
ltys <- rep(c(1,3,3,3,3),10)
plot(xseq,result[,1], type="n",
lwd=3, bty="n", xlab="Sample Size", ylab="Power",ylim=c(0,1),
main="Power by sample size and residual variance")
for (j in 1:length(jseq)) {
lines(xseq, result[,j],lty=ltys[j])
xt <- 4
if (j%%5==1) text( xseq[xt], result[xt,j]-.05,labels = round(jseq[j],2))
}
effective.error(my.model)
ecr(my.model)
grr(my.model)
sample.size <- 100
temp <- 1/(1-ecr(my.model))
myecr <- ecr(my.model)
eff <- effective.error(my.model)
ss <- my.model$slope.variance
non.centrality2 <- sample.size*(log(eff/(eff+ss))+ (ss+eff)/eff-1   )
non.centrality <- sample.size*(temp-log(temp)-1 )
non.centrality3 <- sample.size/2*(temp-1)^2
non.centrality4 <- sample.size* (myecr^2/2)+ (2/3*myecr^3)
alpha <- qchisq(0.95,df=1)
1-pchisq(alpha,ncp=non.centrality,df=1)
powerFromError(my.model, alpha=.05)
# 1df test, MC result from LIFESPAN power = approx. 35%
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3),
intercept.slope.covariance=0,
sample.size=100)
omxmodel <- getOpenMxRepresentation(my.model)
est.power <- simPowerZeroRestriction(omxmodel,restrictions = "slopevariance",N=100)
omxmodel
dt <- simulateData(omxmodel,100)
h0model <- omxmodel
model1 <- mxModel(h0Model, data=mxData(data,type="raw"))
h0Model <- omxmodel
model1 <- mxModel(h0Model, data=mxData(data,type="raw"))
model1 <- mxModel(h0Model, data=mxData(dt,type="raw"))
run1 <- mxRun(model1,silent=T)
run1$fitfunction
run1$fitfunction$vector
run1$fitfunction[[1]]
run1$fitfunction[1
]
run1$fitfunction
run1$output
run1$output$Minus2LogLikelihood
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=100)
powerFromError(my.model)
powerFromError2df(my.model)
# empirical power plot
xseq <- seq(1,210,10)
jseq <- seq(10,100, 5)
result <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
eff <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
for (j in 1:length(jseq)) {
for (i in 1:length(xseq)) {
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=jseq[j], timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=xseq[i])
eff[i,j] <-  effective.error(my.model)
result[i,j] <- powerFromError(my.model)
}
}
ltys <- rep(c(1,3,3,3,3),10)
plot(xseq,result[,1], type="n",
lwd=3, bty="n", xlab="Sample Size", ylab="Power",ylim=c(0,1),
main="Power by sample size and residual variance")
for (j in 1:length(jseq)) {
lines(xseq, result[,j],lty=ltys[j])
xt <- 4
if (j%%5==1) text( xseq[xt], result[xt,j]-.05,labels = round(jseq[j],2))
}
effective.error(my.model)
ecr(my.model)
grr(my.model)
sample.size <- 100
temp <- 1/(1-ecr(my.model))
myecr <- ecr(my.model)
eff <- effective.error(my.model)
ss <- my.model$slope.variance
non.centrality2 <- sample.size*(log(eff/(eff+ss))+ (ss+eff)/eff-1   )
non.centrality <- sample.size*(temp-log(temp)-1 )
non.centrality3 <- sample.size/2*(temp-1)^2
non.centrality4 <- sample.size* (myecr^2/2)+ (2/3*myecr^3)
alpha <- qchisq(0.95,df=1)
1-pchisq(alpha,ncp=non.centrality,df=1)
powerFromError(my.model, alpha=.05)
# 1df test, MC result from LIFESPAN power = approx. 35%
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3),
intercept.slope.covariance=0,
sample.size=100)
detach("package:sempower", unload=T)
require("sempower")
omxmodel <- getOpenMxRepresentation(my.model)
est.power <- simPowerZeroRestriction(omxmodel,restrictions = "slopevariance",N=100)
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=100)
powerFromError(my.model)
powerFromError2df(my.model)
# empirical power plot
xseq <- seq(1,210,10)
jseq <- seq(10,100, 5)
result <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
eff <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
for (j in 1:length(jseq)) {
for (i in 1:length(xseq)) {
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=jseq[j], timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=xseq[i])
eff[i,j] <-  effective.error(my.model)
result[i,j] <- powerFromError(my.model)
}
}
ltys <- rep(c(1,3,3,3,3),10)
plot(xseq,result[,1], type="n",
lwd=3, bty="n", xlab="Sample Size", ylab="Power",ylim=c(0,1),
main="Power by sample size and residual variance")
for (j in 1:length(jseq)) {
lines(xseq, result[,j],lty=ltys[j])
xt <- 4
if (j%%5==1) text( xseq[xt], result[xt,j]-.05,labels = round(jseq[j],2))
}
effective.error(my.model)
ecr(my.model)
grr(my.model)
sample.size <- 100
temp <- 1/(1-ecr(my.model))
myecr <- ecr(my.model)
eff <- effective.error(my.model)
ss <- my.model$slope.variance
non.centrality2 <- sample.size*(log(eff/(eff+ss))+ (ss+eff)/eff-1   )
non.centrality <- sample.size*(temp-log(temp)-1 )
non.centrality3 <- sample.size/2*(temp-1)^2
non.centrality4 <- sample.size* (myecr^2/2)+ (2/3*myecr^3)
alpha <- qchisq(0.95,df=1)
1-pchisq(alpha,ncp=non.centrality,df=1)
powerFromError(my.model, alpha=.05)
# 1df test, MC result from LIFESPAN power = approx. 35%
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3),
intercept.slope.covariance=0,
sample.size=100)
detach("package:sempower", unload=T)
require("sempower")
omxmodel <- getOpenMxRepresentation(my.model)
est.power <- simPowerZeroRestriction(omxmodel,restrictions = "slopevariance",N=100)
est.power
print(est.power)
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=100)
powerFromError(my.model)
powerFromError2df(my.model)
# empirical power plot
xseq <- seq(1,210,10)
jseq <- seq(10,100, 5)
result <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
eff <- matrix(NA, nrow=length(xseq),ncol=length(jseq))
for (j in 1:length(jseq)) {
for (i in 1:length(xseq)) {
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=jseq[j], timepoints=c(0,1,2,3), total.study.time = 3,
sample.size=xseq[i])
eff[i,j] <-  effective.error(my.model)
result[i,j] <- powerFromError(my.model)
}
}
ltys <- rep(c(1,3,3,3,3),10)
plot(xseq,result[,1], type="n",
lwd=3, bty="n", xlab="Sample Size", ylab="Power",ylim=c(0,1),
main="Power by sample size and residual variance")
for (j in 1:length(jseq)) {
lines(xseq, result[,j],lty=ltys[j])
xt <- 4
if (j%%5==1) text( xseq[xt], result[xt,j]-.05,labels = round(jseq[j],2))
}
effective.error(my.model)
ecr(my.model)
grr(my.model)
sample.size <- 100
temp <- 1/(1-ecr(my.model))
myecr <- ecr(my.model)
eff <- effective.error(my.model)
ss <- my.model$slope.variance
non.centrality2 <- sample.size*(log(eff/(eff+ss))+ (ss+eff)/eff-1   )
non.centrality <- sample.size*(temp-log(temp)-1 )
non.centrality3 <- sample.size/2*(temp-1)^2
non.centrality4 <- sample.size* (myecr^2/2)+ (2/3*myecr^3)
alpha <- qchisq(0.95,df=1)
1-pchisq(alpha,ncp=non.centrality,df=1)
powerFromError(my.model, alpha=.05)
# 1df test, MC result from LIFESPAN power = approx. 35%
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3),
intercept.slope.covariance=0,
sample.size=100)
detach("package:sempower", unload=T)
require("sempower")
omxmodel <- getOpenMxRepresentation(my.model)
est.power <- simPowerZeroRestriction(omxmodel,restrictions = "slopevariance",N=100,repetitions = 1000)
print(est.power)
alpha <- qchisq(0.95,df=1)
non.centrality <- 9.286
1-pchisq(alpha,ncp=non.centrality,df=1)
1-pchisq(alpha,ncp=9.286,df=1)
1-pchisq(alpha,ncp=9.286,df=1)
alpha
1-pchisq(alpha,ncp=100/50*9.286,df=1)
1-pchisq(alpha,ncp=0.5*9.286,df=1)
1-pchisq(alpha,ncp=200/50*9.286,df=1)
1-pchisq(alpha,ncp=100/50*9.286,df=1)
1-pchisq(alpha,ncp=44/50*9.286,df=1)
alpha <- qchisq(0.95,df=1)
1-pchisq(alpha,ncp=non.centrality,df=1)
my.model <- lgcm(intercept.variance = 100, slope.variance = 5,
residual.variance=80, timepoints=c(0,1,2,3),
intercept.slope.covariance=0,
sample.size=100)
effective.error(my.model)
ecr(my.model)
grr(my.model)
sample.size <- 100
temp <- 1/(1-ecr(my.model))
myecr <- ecr(my.model)
eff <- effective.error(my.model)
ss <- my.model$slope.variance
non.centrality2 <- sample.size*(log(eff/(eff+ss))+ (ss+eff)/eff-1   )
non.centrality <- sample.size*(temp-log(temp)-1 )
non.centrality3 <- sample.size/2*(temp-1)^2
non.centrality4 <- sample.size* (myecr^2/2)+ (2/3*myecr^3)
alpha <- qchisq(0.95,df=1)
1-pchisq(alpha,ncp=non.centrality,df=1)
powerFromError(my.model, alpha=.05)
# 1df test, MC result from LIFESPAN power = approx. 35%
1-pchisq(alpha,ncp=non.centrality2,df=1)
1-pchisq(alpha,ncp=non.centrality2/2,df=1)
1-pchisq(alpha,ncp=non.centrality2/3,df=1)
1-pchisq(alpha,ncp=non.centrality2/2,df=1)
model <- lgcm(timepoints = c(0,1,2,3),
intercept.variance = .5,
slope.variance = .1,
intercept.slope.covariance=0,
residual.variance=.5,
sample.size=100
)
#
# This model specification was automatically generated by Onyx
#
require("OpenMx");
manifests<-c("Y1","Y2","Y3","Y4")
latents<-c("X")
model <- mxModel("SarisSatorra1985",
type="RAM",
manifestVars = manifests,
latentVars = latents,
mxPath(from="X",to=c("Y1","Y2","Y3"), free=c(FALSE,FALSE,FALSE), value=c(0.4,0.5,0.4) , arrows=1, label=c("X__Y1","X__Y2","X__Y3") ),
mxPath(from="Y1",to=c("Y4","Y2"), free=c(FALSE,FALSE), value=c(0.4,0.2) , arrows=1, label=c("Y1__Y4","Y1__Y2") ),
mxPath(from="Y2",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y2__Y4") ),
mxPath(from="Y3",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y3__Y4") ),
mxPath(from="X",to=c("X"), free=c(TRUE), value=c(1.0) , arrows=2, label=c("VAR_X") ),
mxPath(from="Y1",to=c("Y1"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y1") ),
mxPath(from="Y2",to=c("Y2"), free=c(TRUE), value=c(0.61) , arrows=2, label=c("VAR_Y2") ),
mxPath(from="Y3",to=c("Y3"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y3") ),
mxPath(from="Y4",to=c("Y4"), free=c(TRUE), value=c(0.27) , arrows=2, label=c("VAR_Y4") ),
mxPath(from="one",to=c("Y1","Y2","Y3","Y4"), free=F, value=0, arrows=1)
);
result <- mxRun(model)
summary(result)
manifests<-c("Y1","Y2","Y3","Y4")
latents<-c("X")
model <- mxModel("SarisSatorra1985",
type="RAM",
manifestVars = manifests,
latentVars = latents,
mxPath(from="X",to=c("Y1","Y2","Y3"), free=c(FALSE,FALSE,FALSE), value=c(0.4,0.5,0.4) , arrows=1, label=c("X__Y1","X__Y2","X__Y3") ),
mxPath(from="Y1",to=c("Y4","Y2"), free=c(FALSE,FALSE), value=c(0.4,0.2) , arrows=1, label=c("Y1__Y4","Y1__Y2") ),
mxPath(from="Y2",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y2__Y4") ),
mxPath(from="Y3",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y3__Y4") ),
mxPath(from="X",to=c("X"), free=c(TRUE), value=c(1.0) , arrows=2, label=c("VAR_X") ),
mxPath(from="Y1",to=c("Y1"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y1") ),
mxPath(from="Y2",to=c("Y2"), free=c(TRUE), value=c(0.61) , arrows=2, label=c("VAR_Y2") ),
mxPath(from="Y3",to=c("Y3"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y3") ),
mxPath(from="Y4",to=c("Y4"), free=c(TRUE), value=c(0.27) , arrows=2, label=c("VAR_Y4") ),
mxPath(from="one",to=c("Y1","Y2","Y3","Y4"), free=F, value=0, arrows=1)
);
require("OpenMx");
manifests<-c("Y1","Y2","Y3","Y4")
latents<-c("X")
require("OpenMx");
manifests<-c("Y1","Y2","Y3","Y4")
latents<-c("X")
#
require("OpenMx");
manifests<-c("Y1","Y2","Y3","Y4")
latents<-c("X")
model <- mxModel("SarisSatorra1985",
type="RAM",
manifestVars = manifests,
latentVars = latents,
mxPath(from="X",to=c("Y1","Y2","Y3"), free=c(FALSE,FALSE,FALSE), value=c(0.4,0.5,0.4) , arrows=1, label=c("X__Y1","X__Y2","X__Y3") ),
mxPath(from="Y1",to=c("Y4","Y2"), free=c(FALSE,FALSE), value=c(0.4,0.2) , arrows=1, label=c("Y1__Y4","Y1__Y2") ),
mxPath(from="Y2",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y2__Y4") ),
mxPath(from="Y3",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y3__Y4") ),
mxPath(from="X",to=c("X"), free=c(TRUE), value=c(1.0) , arrows=2, label=c("VAR_X") ),
mxPath(from="Y1",to=c("Y1"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y1") ),
mxPath(from="Y2",to=c("Y2"), free=c(TRUE), value=c(0.61) , arrows=2, label=c("VAR_Y2") ),
mxPath(from="Y3",to=c("Y3"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y3") ),
mxPath(from="Y4",to=c("Y4"), free=c(TRUE), value=c(0.27) , arrows=2, label=c("VAR_Y4") ),
mxPath(from="one",to=c("Y1","Y2","Y3","Y4"), free=F, value=0, arrows=1)
);
result <- mxRun(model)
summary(result)
result
require("OpenMx");
manifests<-c("Y1","Y2","Y3","Y4")
latents<-c("X")
model <- mxModel("SarisSatorra1985",
type="RAM",
manifestVars = manifests,
latentVars = latents,
mxPath(from="X",to=c("Y1","Y2","Y3"), free=c(FALSE,FALSE,FALSE), value=c(0.4,0.5,0.4) , arrows=1, label=c("X__Y1","X__Y2","X__Y3") ),
mxPath(from="Y1",to=c("Y4","Y2"), free=c(FALSE,FALSE), value=c(0.4,0.2) , arrows=1, label=c("Y1__Y4","Y1__Y2") ),
mxPath(from="Y2",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y2__Y4") ),
mxPath(from="Y3",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y3__Y4") ),
mxPath(from="X",to=c("X"), free=c(TRUE), value=c(1.0) , arrows=2, label=c("VAR_X") ),
mxPath(from="Y1",to=c("Y1"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y1") ),
mxPath(from="Y2",to=c("Y2"), free=c(TRUE), value=c(0.61) , arrows=2, label=c("VAR_Y2") ),
mxPath(from="Y3",to=c("Y3"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y3") ),
mxPath(from="Y4",to=c("Y4"), free=c(TRUE), value=c(0.27) , arrows=2, label=c("VAR_Y4") ),
mxPath(from="one",to=c("Y1","Y2","Y3","Y4"), free=F, value=0, arrows=1)
);
result <- mxRun(model)
summary(result)
#
# This model specification was automatically generated by Onyx
require("OpenMx");
manifests<-c("Y1","Y2","Y3","Y4")
latents<-c("X")
model <- mxModel("SarisSatorra1985",
type="RAM",
manifestVars = manifests,
latentVars = latents,
mxPath(from="X",to=c("Y1","Y2","Y3"), free=c(FALSE,FALSE,FALSE), value=c(0.4,0.5,0.4) , arrows=1, label=c("X__Y1","X__Y2","X__Y3") ),
mxPath(from="Y1",to=c("Y4","Y2"), free=c(FALSE,FALSE), value=c(0.4,0.2) , arrows=1, label=c("Y1__Y4","Y1__Y2") ),
mxPath(from="Y2",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y2__Y4") ),
mxPath(from="Y3",to=c("Y4"), free=c(FALSE), value=c(0.4) , arrows=1, label=c("Y3__Y4") ),
mxPath(from="X",to=c("X"), free=c(TRUE), value=c(1.0) , arrows=2, label=c("VAR_X") ),
mxPath(from="Y1",to=c("Y1"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y1") ),
mxPath(from="Y2",to=c("Y2"), free=c(TRUE), value=c(0.61) , arrows=2, label=c("VAR_Y2") ),
mxPath(from="Y3",to=c("Y3"), free=c(TRUE), value=c(0.84) , arrows=2, label=c("VAR_Y3") ),
mxPath(from="Y4",to=c("Y4"), free=c(TRUE), value=c(0.27) , arrows=2, label=c("VAR_Y4") ),
mxPath(from="one",to=c("Y1","Y2","Y3","Y4"), free=F, value=0, arrows=1)
);
res <- simPowerZeroRestriction(model,"Y1__Y2",N=100,rep=300)
print(res)
res <- simPowerZeroRestriction(model,"Y1__Y2",N=100,rep=300)
print(res)
